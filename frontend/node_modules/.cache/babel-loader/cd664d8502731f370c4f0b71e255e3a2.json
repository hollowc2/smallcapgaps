{"ast":null,"code":"var _jsxFileName = \"/home/corey/Desktop/SmallCapGaps/frontend/src/components/Chart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { createChart } from 'lightweight-charts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chart({\n  gap,\n  dailyData\n}) {\n  _s();\n  const chartContainerRef = useRef();\n  useEffect(() => {\n    console.log('Rendering Chart with data:', dailyData); // Debug Log\n\n    if (!gap || !dailyData || dailyData.length === 0) return;\n    const chart = createChart(chartContainerRef.current, {\n      width: 600,\n      height: 400,\n      // Increased height to accommodate additional series\n      layout: {\n        background: {\n          color: '#ffffff'\n        },\n        textColor: '#333'\n      },\n      grid: {\n        vertLines: {\n          color: '#f0f0f0'\n        },\n        horzLines: {\n          color: '#f0f0f0'\n        }\n      },\n      timeScale: {\n        timeVisible: true,\n        secondsVisible: false\n      }\n    });\n    const candlestickSeries = chart.addCandlestickSeries({\n      upColor: '#26a69a',\n      downColor: '#ef5350',\n      borderVisible: false,\n      wickUpColor: '#26a69a',\n      wickDownColor: '#ef5350'\n    });\n    const volumeSeries = chart.addHistogramSeries({\n      color: '#26a69a',\n      priceFormat: {\n        type: 'volume'\n      },\n      priceScaleId: 'volume',\n      scaleMargins: {\n        top: 0.8,\n        bottom: 0\n      }\n    });\n    const vwapSeries = chart.addLineSeries({\n      color: 'rgba(255, 192, 0, 0.8)',\n      lineWidth: 2,\n      priceScaleId: 'right'\n    });\n    const transactionsSeries = chart.addLineSeries({\n      color: 'rgba(76, 175, 80, 0.8)',\n      lineWidth: 2,\n      priceScaleId: 'left'\n    });\n    const formattedData = dailyData.map(item => ({\n      time: item.t / 1000,\n      // Convert milliseconds to seconds\n      open: item.o,\n      high: item.h,\n      low: item.l,\n      close: item.c,\n      volume: item.v,\n      vwap: item.vw,\n      transactions: item.n\n    }));\n    candlestickSeries.setData(formattedData);\n    volumeSeries.setData(formattedData.map(item => ({\n      time: item.time,\n      value: item.volume,\n      color: item.close > item.open ? 'rgba(38, 166, 154, 0.5)' : 'rgba(239, 83, 80, 0.5)'\n    })));\n    vwapSeries.setData(formattedData.map(item => ({\n      time: item.time,\n      value: item.vwap\n    })));\n    transactionsSeries.setData(formattedData.map(item => ({\n      time: item.time,\n      value: item.transactions\n    })));\n\n    // Add a marker for the gap\n    const gapTime = gap.t / 1000; // Convert milliseconds to seconds\n    candlestickSeries.setMarkers([{\n      time: gapTime,\n      position: 'aboveBar',\n      color: 'blue',\n      shape: 'arrowUp',\n      text: 'Gap'\n    }]);\n    chart.timeScale().fitContent();\n    return () => {\n      chart.remove();\n    };\n  }, [gap, dailyData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: chartContainerRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 10\n  }, this);\n}\n_s(Chart, \"ZI1LdXO604IZpmh0kAttG3FSLiA=\");\n_c = Chart;\nexport default Chart;\nvar _c;\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"names":["React","useEffect","useRef","createChart","jsxDEV","_jsxDEV","Chart","gap","dailyData","_s","chartContainerRef","console","log","length","chart","current","width","height","layout","background","color","textColor","grid","vertLines","horzLines","timeScale","timeVisible","secondsVisible","candlestickSeries","addCandlestickSeries","upColor","downColor","borderVisible","wickUpColor","wickDownColor","volumeSeries","addHistogramSeries","priceFormat","type","priceScaleId","scaleMargins","top","bottom","vwapSeries","addLineSeries","lineWidth","transactionsSeries","formattedData","map","item","time","t","open","o","high","h","low","l","close","c","volume","v","vwap","vw","transactions","n","setData","value","gapTime","setMarkers","position","shape","text","fitContent","remove","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/corey/Desktop/SmallCapGaps/frontend/src/components/Chart.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { createChart } from 'lightweight-charts';\n\nfunction Chart({ gap, dailyData }) {\n  const chartContainerRef = useRef();\n\n  useEffect(() => {\n    console.log('Rendering Chart with data:', dailyData); // Debug Log\n    \n    if (!gap || !dailyData || dailyData.length === 0) return;\n\n    const chart = createChart(chartContainerRef.current, {\n      width: 600,\n      height: 400, // Increased height to accommodate additional series\n      layout: {\n        background: { color: '#ffffff' },\n        textColor: '#333',\n      },\n      grid: {\n        vertLines: { color: '#f0f0f0' },\n        horzLines: { color: '#f0f0f0' },\n      },\n      timeScale: {\n        timeVisible: true,\n        secondsVisible: false,\n      },\n    });\n\n    const candlestickSeries = chart.addCandlestickSeries({\n      upColor: '#26a69a',\n      downColor: '#ef5350',\n      borderVisible: false,\n      wickUpColor: '#26a69a',\n      wickDownColor: '#ef5350',\n    });\n\n    const volumeSeries = chart.addHistogramSeries({\n      color: '#26a69a',\n      priceFormat: {\n        type: 'volume',\n      },\n      priceScaleId: 'volume',\n      scaleMargins: {\n        top: 0.8,\n        bottom: 0,\n      },\n    });\n\n    const vwapSeries = chart.addLineSeries({\n      color: 'rgba(255, 192, 0, 0.8)',\n      lineWidth: 2,\n      priceScaleId: 'right',\n    });\n\n    const transactionsSeries = chart.addLineSeries({\n      color: 'rgba(76, 175, 80, 0.8)',\n      lineWidth: 2,\n      priceScaleId: 'left',\n    });\n\n    const formattedData = dailyData.map(item => ({\n      time: item.t / 1000, // Convert milliseconds to seconds\n      open: item.o,\n      high: item.h,\n      low: item.l,\n      close: item.c,\n      volume: item.v,\n      vwap: item.vw,\n      transactions: item.n,\n    }));\n\n    candlestickSeries.setData(formattedData);\n    volumeSeries.setData(formattedData.map(item => ({\n      time: item.time,\n      value: item.volume,\n      color: item.close > item.open ? 'rgba(38, 166, 154, 0.5)' : 'rgba(239, 83, 80, 0.5)',\n    })));\n    vwapSeries.setData(formattedData.map(item => ({\n      time: item.time,\n      value: item.vwap,\n    })));\n    transactionsSeries.setData(formattedData.map(item => ({\n      time: item.time,\n      value: item.transactions,\n    })));\n\n    // Add a marker for the gap\n    const gapTime = gap.t / 1000; // Convert milliseconds to seconds\n    candlestickSeries.setMarkers([\n      {\n        time: gapTime,\n        position: 'aboveBar',\n        color: 'blue',\n        shape: 'arrowUp',\n        text: 'Gap',\n      },\n    ]);\n\n    chart.timeScale().fitContent();\n\n    return () => {\n      chart.remove();\n    };\n  }, [gap, dailyData]);\n\n  return <div ref={chartContainerRef} />;\n}\n\nexport default Chart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}