{"ast":null,"code":"var _jsxFileName = \"/home/corey/Desktop/SmallCapGaps/frontend/src/components/Chart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { createChart } from 'lightweight-charts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chart({\n  gap,\n  dailyData\n}) {\n  _s();\n  const chartContainerRef = useRef();\n  useEffect(() => {\n    if (!gap || !dailyData || dailyData.length === 0) return;\n    const chart = createChart(chartContainerRef.current, {\n      width: 600,\n      height: 300\n    });\n    const candlestickSeries = chart.addCandlestickSeries();\n    const formattedData = dailyData.map(item => ({\n      time: item.date,\n      open: parseFloat(item.open),\n      high: parseFloat(item.high),\n      low: parseFloat(item.low),\n      close: parseFloat(item.close)\n    }));\n    candlestickSeries.setData(formattedData);\n\n    // Add a marker for the gap date\n    candlestickSeries.setMarkers([{\n      time: gap.date,\n      position: 'aboveBar',\n      color: 'red',\n      shape: 'arrowDown',\n      text: 'Gap'\n    }]);\n\n    // Set visible range to include some days before and after the gap\n    const gapIndex = formattedData.findIndex(item => item.time === gap.date);\n    const rangeStart = Math.max(0, gapIndex - 10);\n    const rangeEnd = Math.min(formattedData.length - 1, gapIndex + 10);\n    chart.timeScale().setVisibleRange({\n      from: formattedData[rangeStart].time,\n      to: formattedData[rangeEnd].time\n    });\n    return () => {\n      chart.remove();\n    };\n  }, [gap, dailyData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: chartContainerRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 10\n  }, this);\n}\n_s(Chart, \"ZI1LdXO604IZpmh0kAttG3FSLiA=\");\n_c = Chart;\nexport default Chart;\nvar _c;\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"names":["React","useEffect","useRef","createChart","jsxDEV","_jsxDEV","Chart","gap","dailyData","_s","chartContainerRef","length","chart","current","width","height","candlestickSeries","addCandlestickSeries","formattedData","map","item","time","date","open","parseFloat","high","low","close","setData","setMarkers","position","color","shape","text","gapIndex","findIndex","rangeStart","Math","max","rangeEnd","min","timeScale","setVisibleRange","from","to","remove","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/corey/Desktop/SmallCapGaps/frontend/src/components/Chart.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { createChart } from 'lightweight-charts';\n\nfunction Chart({ gap, dailyData }) {\n  const chartContainerRef = useRef();\n\n  useEffect(() => {\n    if (!gap || !dailyData || dailyData.length === 0) return;\n\n    const chart = createChart(chartContainerRef.current, {\n      width: 600,\n      height: 300,\n    });\n\n    const candlestickSeries = chart.addCandlestickSeries();\n\n    const formattedData = dailyData.map(item => ({\n      time: item.date,\n      open: parseFloat(item.open),\n      high: parseFloat(item.high),\n      low: parseFloat(item.low),\n      close: parseFloat(item.close),\n    }));\n\n    candlestickSeries.setData(formattedData);\n\n    // Add a marker for the gap date\n    candlestickSeries.setMarkers([\n      {\n        time: gap.date,\n        position: 'aboveBar',\n        color: 'red',\n        shape: 'arrowDown',\n        text: 'Gap',\n      },\n    ]);\n\n    // Set visible range to include some days before and after the gap\n    const gapIndex = formattedData.findIndex(item => item.time === gap.date);\n    const rangeStart = Math.max(0, gapIndex - 10);\n    const rangeEnd = Math.min(formattedData.length - 1, gapIndex + 10);\n    \n    chart.timeScale().setVisibleRange({\n      from: formattedData[rangeStart].time,\n      to: formattedData[rangeEnd].time,\n    });\n\n    return () => {\n      chart.remove();\n    };\n  }, [gap, dailyData]);\n\n  return <div ref={chartContainerRef} />;\n}\n\nexport default Chart;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,SAASC,WAAW,QAAQ,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,SAASC,KAAKA,CAAC;EAAEC,GAAG;EAAEC;AAAU,CAAC,EAAE;EAAAC,EAAA;EACjC,MAAMC,iBAAiB,GAAGR,MAAM,CAAC,CAAC;EAElCD,SAAS,CAAC,MAAM;IACd,IAAI,CAACM,GAAG,IAAI,CAACC,SAAS,IAAIA,SAAS,CAACG,MAAM,KAAK,CAAC,EAAE;IAElD,MAAMC,KAAK,GAAGT,WAAW,CAACO,iBAAiB,CAACG,OAAO,EAAE;MACnDC,KAAK,EAAE,GAAG;MACVC,MAAM,EAAE;IACV,CAAC,CAAC;IAEF,MAAMC,iBAAiB,GAAGJ,KAAK,CAACK,oBAAoB,CAAC,CAAC;IAEtD,MAAMC,aAAa,GAAGV,SAAS,CAACW,GAAG,CAACC,IAAI,KAAK;MAC3CC,IAAI,EAAED,IAAI,CAACE,IAAI;MACfC,IAAI,EAAEC,UAAU,CAACJ,IAAI,CAACG,IAAI,CAAC;MAC3BE,IAAI,EAAED,UAAU,CAACJ,IAAI,CAACK,IAAI,CAAC;MAC3BC,GAAG,EAAEF,UAAU,CAACJ,IAAI,CAACM,GAAG,CAAC;MACzBC,KAAK,EAAEH,UAAU,CAACJ,IAAI,CAACO,KAAK;IAC9B,CAAC,CAAC,CAAC;IAEHX,iBAAiB,CAACY,OAAO,CAACV,aAAa,CAAC;;IAExC;IACAF,iBAAiB,CAACa,UAAU,CAAC,CAC3B;MACER,IAAI,EAAEd,GAAG,CAACe,IAAI;MACdQ,QAAQ,EAAE,UAAU;MACpBC,KAAK,EAAE,KAAK;MACZC,KAAK,EAAE,WAAW;MAClBC,IAAI,EAAE;IACR,CAAC,CACF,CAAC;;IAEF;IACA,MAAMC,QAAQ,GAAGhB,aAAa,CAACiB,SAAS,CAACf,IAAI,IAAIA,IAAI,CAACC,IAAI,KAAKd,GAAG,CAACe,IAAI,CAAC;IACxE,MAAMc,UAAU,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEJ,QAAQ,GAAG,EAAE,CAAC;IAC7C,MAAMK,QAAQ,GAAGF,IAAI,CAACG,GAAG,CAACtB,aAAa,CAACP,MAAM,GAAG,CAAC,EAAEuB,QAAQ,GAAG,EAAE,CAAC;IAElEtB,KAAK,CAAC6B,SAAS,CAAC,CAAC,CAACC,eAAe,CAAC;MAChCC,IAAI,EAAEzB,aAAa,CAACkB,UAAU,CAAC,CAACf,IAAI;MACpCuB,EAAE,EAAE1B,aAAa,CAACqB,QAAQ,CAAC,CAAClB;IAC9B,CAAC,CAAC;IAEF,OAAO,MAAM;MACXT,KAAK,CAACiC,MAAM,CAAC,CAAC;IAChB,CAAC;EACH,CAAC,EAAE,CAACtC,GAAG,EAAEC,SAAS,CAAC,CAAC;EAEpB,oBAAOH,OAAA;IAAKyC,GAAG,EAAEpC;EAAkB;IAAAqC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACxC;AAACzC,EAAA,CAlDQH,KAAK;AAAA6C,EAAA,GAAL7C,KAAK;AAoDd,eAAeA,KAAK;AAAC,IAAA6C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}