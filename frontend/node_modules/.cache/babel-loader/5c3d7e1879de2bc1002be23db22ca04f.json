{"ast":null,"code":"var _jsxFileName = \"/home/corey/Desktop/SmallCapGaps/frontend/src/components/IntradayChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { createChart } from 'lightweight-charts';\nimport { DateTime } from 'luxon';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction IntradayChart({\n  gap,\n  data\n}) {\n  _s();\n  const chartContainerRef = useRef();\n  useEffect(() => {\n    console.log('Rendering IntradayChart with data:', data);\n    if (!gap || !data || data.length === 0) return;\n    const chart = createChart(chartContainerRef.current, {\n      width: 600,\n      height: 400,\n      layout: {\n        background: {\n          color: '#ffffff'\n        },\n        textColor: '#333'\n      },\n      grid: {\n        vertLines: {\n          color: '#f0f0f0'\n        },\n        horzLines: {\n          color: '#f0f0f0'\n        }\n      },\n      timeScale: {\n        timeVisible: true,\n        secondsVisible: false,\n        tickMarkFormatter: time => {\n          const date = DateTime.fromSeconds(time).setZone('America/Los_Angeles');\n          return date.toFormat('HH:mm');\n        }\n      }\n    });\n    const candlestickSeries = chart.addCandlestickSeries();\n\n    // Add pre-market and after-market shading\n    const preMarketSeries = chart.addAreaSeries({\n      topColor: 'rgba(200, 200, 200, 0.3)',\n      bottomColor: 'rgba(200, 200, 200, 0.3)',\n      lineColor: 'rgba(200, 200, 200, 0.3)',\n      lineWidth: 0,\n      priceScaleId: '',\n      // This makes the series not attached to any price scale\n      scaleMargins: {\n        top: 0,\n        bottom: 0\n      }\n    });\n    const afterMarketSeries = chart.addAreaSeries({\n      topColor: 'rgba(200, 200, 200, 0.3)',\n      bottomColor: 'rgba(200, 200, 200, 0.3)',\n      lineColor: 'rgba(200, 200, 200, 0.3)',\n      lineWidth: 0,\n      priceScaleId: '',\n      // This makes the series not attached to any price scale\n      scaleMargins: {\n        top: 0,\n        bottom: 0\n      }\n    });\n\n    // VWAP series (previously VWAP2)\n    const vwapSeries = chart.addLineSeries({\n      color: 'rgba(128, 0, 128, 0.8)',\n      // Purple color\n      lineWidth: 2,\n      priceScaleId: 'right'\n    });\n\n    // Add EMA series\n    const emaSeries = chart.addLineSeries({\n      color: 'rgba(255, 82, 82, 0.8)',\n      lineWidth: 2,\n      priceScaleId: 'right'\n    });\n    const formattedData = data.map(item => ({\n      time: DateTime.fromMillis(item.timestamp).setZone('America/Los_Angeles').toSeconds(),\n      open: item.open,\n      high: item.high,\n      low: item.low,\n      close: item.close,\n      volume: item.volume\n    }));\n\n    // Generate pre-market and after-market shading data\n    const {\n      preMarketData,\n      afterMarketData\n    } = generateMarketHoursData(formattedData);\n\n    // Calculate VWAP\n    const vwapData = calculateVWAP(formattedData);\n    console.log('VWAP Data:', vwapData);\n\n    // Calculate 10-period EMA\n    const emaData = calculateEMA(formattedData, 10);\n    candlestickSeries.setData(formattedData);\n    preMarketSeries.setData(preMarketData);\n    afterMarketSeries.setData(afterMarketData);\n    vwapSeries.setData(vwapData);\n    emaSeries.setData(emaData);\n    chart.timeScale().fitContent();\n    const handleResize = () => {\n      chart.applyOptions({\n        width: chartContainerRef.current.clientWidth\n      });\n    };\n    window.addEventListener('resize', handleResize);\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      chart.remove();\n    };\n  }, [gap, data]);\n\n  // Add this function outside the useEffect hook\n  const calculateVWAP = data => {\n    let cumulativePV = 0;\n    let cumulativeVolume = 0;\n    return data.map(item => {\n      const typicalPrice = (item.high + item.low + item.close) / 3;\n      cumulativePV += typicalPrice * item.volume;\n      cumulativeVolume += item.volume;\n      const vwap = cumulativePV / cumulativeVolume;\n      return {\n        time: item.time,\n        value: vwap\n      };\n    });\n  };\n\n  // Add this function outside the useEffect hook\n  const calculateEMA = (data, period) => {\n    const k = 2 / (period + 1);\n    let ema = data[0].close;\n    return data.map((item, index) => {\n      if (index === 0) {\n        return {\n          time: item.time,\n          value: ema\n        };\n      }\n      ema = (item.close - ema) * k + ema;\n      return {\n        time: item.time,\n        value: ema\n      };\n    });\n  };\n\n  // Add this function outside the useEffect hook\n  const generateMarketHoursData = data => {\n    const preMarketData = [];\n    const afterMarketData = [];\n\n    // Find the overall min and max prices\n    const minPrice = Math.min(...data.map(item => item.low));\n    const maxPrice = Math.max(...data.map(item => item.high));\n    data.forEach(item => {\n      const date = DateTime.fromSeconds(item.time).setZone('America/Los_Angeles');\n      const hour = date.hour;\n      const minute = date.minute;\n      if (hour < 9 || hour === 9 && minute < 30) {\n        preMarketData.push({\n          time: item.time,\n          value: minPrice\n        }, {\n          time: item.time,\n          value: maxPrice\n        });\n      } else if (hour >= 16) {\n        afterMarketData.push({\n          time: item.time,\n          value: minPrice\n        }, {\n          time: item.time,\n          value: maxPrice\n        });\n      }\n    });\n    return {\n      preMarketData,\n      afterMarketData\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: chartContainerRef,\n    className: \"ChartContainer\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 10\n  }, this);\n}\n_s(IntradayChart, \"ZI1LdXO604IZpmh0kAttG3FSLiA=\");\n_c = IntradayChart;\nexport default IntradayChart;\nvar _c;\n$RefreshReg$(_c, \"IntradayChart\");","map":{"version":3,"names":["React","useEffect","useRef","createChart","DateTime","jsxDEV","_jsxDEV","IntradayChart","gap","data","_s","chartContainerRef","console","log","length","chart","current","width","height","layout","background","color","textColor","grid","vertLines","horzLines","timeScale","timeVisible","secondsVisible","tickMarkFormatter","time","date","fromSeconds","setZone","toFormat","candlestickSeries","addCandlestickSeries","preMarketSeries","addAreaSeries","topColor","bottomColor","lineColor","lineWidth","priceScaleId","scaleMargins","top","bottom","afterMarketSeries","vwapSeries","addLineSeries","emaSeries","formattedData","map","item","fromMillis","timestamp","toSeconds","open","high","low","close","volume","preMarketData","afterMarketData","generateMarketHoursData","vwapData","calculateVWAP","emaData","calculateEMA","setData","fitContent","handleResize","applyOptions","clientWidth","window","addEventListener","removeEventListener","remove","cumulativePV","cumulativeVolume","typicalPrice","vwap","value","period","k","ema","index","minPrice","Math","min","maxPrice","max","forEach","hour","minute","push","ref","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/corey/Desktop/SmallCapGaps/frontend/src/components/IntradayChart.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { createChart } from 'lightweight-charts';\nimport { DateTime } from 'luxon';\n\nfunction IntradayChart({ gap, data }) {\n  const chartContainerRef = useRef();\n\n  useEffect(() => {\n    console.log('Rendering IntradayChart with data:', data);\n    if (!gap || !data || data.length === 0) return;\n\n    const chart = createChart(chartContainerRef.current, {\n      width: 600,\n      height: 400,\n      layout: {\n        background: { color: '#ffffff' },\n        textColor: '#333',\n      },\n      grid: {\n        vertLines: { color: '#f0f0f0' },\n        horzLines: { color: '#f0f0f0' },\n      },\n      timeScale: {\n        timeVisible: true,\n        secondsVisible: false,\n        tickMarkFormatter: (time) => {\n          const date = DateTime.fromSeconds(time).setZone('America/Los_Angeles');\n          return date.toFormat('HH:mm');\n        },\n      },\n    });\n\n    const candlestickSeries = chart.addCandlestickSeries();\n    \n    // Add pre-market and after-market shading\n    const preMarketSeries = chart.addAreaSeries({\n      topColor: 'rgba(200, 200, 200, 0.3)',\n      bottomColor: 'rgba(200, 200, 200, 0.3)',\n      lineColor: 'rgba(200, 200, 200, 0.3)',\n      lineWidth: 0,\n      priceScaleId: '', // This makes the series not attached to any price scale\n      scaleMargins: {\n        top: 0,\n        bottom: 0,\n      },\n    });\n\n    const afterMarketSeries = chart.addAreaSeries({\n      topColor: 'rgba(200, 200, 200, 0.3)',\n      bottomColor: 'rgba(200, 200, 200, 0.3)',\n      lineColor: 'rgba(200, 200, 200, 0.3)',\n      lineWidth: 0,\n      priceScaleId: '', // This makes the series not attached to any price scale\n      scaleMargins: {\n        top: 0,\n        bottom: 0,\n      },\n    });\n\n    // VWAP series (previously VWAP2)\n    const vwapSeries = chart.addLineSeries({\n      color: 'rgba(128, 0, 128, 0.8)', // Purple color\n      lineWidth: 2,\n      priceScaleId: 'right',\n    });\n\n    // Add EMA series\n    const emaSeries = chart.addLineSeries({\n      color: 'rgba(255, 82, 82, 0.8)',\n      lineWidth: 2,\n      priceScaleId: 'right',\n    });\n\n    const formattedData = data.map(item => ({\n      time: DateTime.fromMillis(item.timestamp).setZone('America/Los_Angeles').toSeconds(),\n      open: item.open,\n      high: item.high,\n      low: item.low,\n      close: item.close,\n      volume: item.volume,\n    }));\n\n    // Generate pre-market and after-market shading data\n    const { preMarketData, afterMarketData } = generateMarketHoursData(formattedData);\n\n    // Calculate VWAP\n    const vwapData = calculateVWAP(formattedData);\n\n    console.log('VWAP Data:', vwapData);\n\n    // Calculate 10-period EMA\n    const emaData = calculateEMA(formattedData, 10);\n\n    candlestickSeries.setData(formattedData);\n    preMarketSeries.setData(preMarketData);\n    afterMarketSeries.setData(afterMarketData);\n    vwapSeries.setData(vwapData);\n    emaSeries.setData(emaData);\n\n    chart.timeScale().fitContent();\n\n    const handleResize = () => {\n      chart.applyOptions({ width: chartContainerRef.current.clientWidth });\n    };\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      chart.remove();\n    };\n  }, [gap, data]);\n\n  // Add this function outside the useEffect hook\n  const calculateVWAP = (data) => {\n    let cumulativePV = 0;\n    let cumulativeVolume = 0;\n\n    return data.map((item) => {\n      const typicalPrice = (item.high + item.low + item.close) / 3;\n      cumulativePV += typicalPrice * item.volume;\n      cumulativeVolume += item.volume;\n      const vwap = cumulativePV / cumulativeVolume;\n\n      return {\n        time: item.time,\n        value: vwap\n      };\n    });\n  };\n\n  // Add this function outside the useEffect hook\n  const calculateEMA = (data, period) => {\n    const k = 2 / (period + 1);\n    let ema = data[0].close;\n    \n    return data.map((item, index) => {\n      if (index === 0) {\n        return { time: item.time, value: ema };\n      }\n      ema = (item.close - ema) * k + ema;\n      return { time: item.time, value: ema };\n    });\n  };\n\n  // Add this function outside the useEffect hook\n  const generateMarketHoursData = (data) => {\n    const preMarketData = [];\n    const afterMarketData = [];\n    \n    // Find the overall min and max prices\n    const minPrice = Math.min(...data.map(item => item.low));\n    const maxPrice = Math.max(...data.map(item => item.high));\n    \n    data.forEach((item) => {\n      const date = DateTime.fromSeconds(item.time).setZone('America/Los_Angeles');\n      const hour = date.hour;\n      const minute = date.minute;\n\n      if (hour < 9 || (hour === 9 && minute < 30)) {\n        preMarketData.push({ time: item.time, value: minPrice }, { time: item.time, value: maxPrice });\n      } else if (hour >= 16) {\n        afterMarketData.push({ time: item.time, value: minPrice }, { time: item.time, value: maxPrice });\n      }\n    });\n\n    return { preMarketData, afterMarketData };\n  };\n\n  return <div ref={chartContainerRef} className=\"ChartContainer\" />;\n}\n\nexport default IntradayChart;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,SAASC,WAAW,QAAQ,oBAAoB;AAChD,SAASC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,SAASC,aAAaA,CAAC;EAAEC,GAAG;EAAEC;AAAK,CAAC,EAAE;EAAAC,EAAA;EACpC,MAAMC,iBAAiB,GAAGT,MAAM,CAAC,CAAC;EAElCD,SAAS,CAAC,MAAM;IACdW,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEJ,IAAI,CAAC;IACvD,IAAI,CAACD,GAAG,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACK,MAAM,KAAK,CAAC,EAAE;IAExC,MAAMC,KAAK,GAAGZ,WAAW,CAACQ,iBAAiB,CAACK,OAAO,EAAE;MACnDC,KAAK,EAAE,GAAG;MACVC,MAAM,EAAE,GAAG;MACXC,MAAM,EAAE;QACNC,UAAU,EAAE;UAAEC,KAAK,EAAE;QAAU,CAAC;QAChCC,SAAS,EAAE;MACb,CAAC;MACDC,IAAI,EAAE;QACJC,SAAS,EAAE;UAAEH,KAAK,EAAE;QAAU,CAAC;QAC/BI,SAAS,EAAE;UAAEJ,KAAK,EAAE;QAAU;MAChC,CAAC;MACDK,SAAS,EAAE;QACTC,WAAW,EAAE,IAAI;QACjBC,cAAc,EAAE,KAAK;QACrBC,iBAAiB,EAAGC,IAAI,IAAK;UAC3B,MAAMC,IAAI,GAAG3B,QAAQ,CAAC4B,WAAW,CAACF,IAAI,CAAC,CAACG,OAAO,CAAC,qBAAqB,CAAC;UACtE,OAAOF,IAAI,CAACG,QAAQ,CAAC,OAAO,CAAC;QAC/B;MACF;IACF,CAAC,CAAC;IAEF,MAAMC,iBAAiB,GAAGpB,KAAK,CAACqB,oBAAoB,CAAC,CAAC;;IAEtD;IACA,MAAMC,eAAe,GAAGtB,KAAK,CAACuB,aAAa,CAAC;MAC1CC,QAAQ,EAAE,0BAA0B;MACpCC,WAAW,EAAE,0BAA0B;MACvCC,SAAS,EAAE,0BAA0B;MACrCC,SAAS,EAAE,CAAC;MACZC,YAAY,EAAE,EAAE;MAAE;MAClBC,YAAY,EAAE;QACZC,GAAG,EAAE,CAAC;QACNC,MAAM,EAAE;MACV;IACF,CAAC,CAAC;IAEF,MAAMC,iBAAiB,GAAGhC,KAAK,CAACuB,aAAa,CAAC;MAC5CC,QAAQ,EAAE,0BAA0B;MACpCC,WAAW,EAAE,0BAA0B;MACvCC,SAAS,EAAE,0BAA0B;MACrCC,SAAS,EAAE,CAAC;MACZC,YAAY,EAAE,EAAE;MAAE;MAClBC,YAAY,EAAE;QACZC,GAAG,EAAE,CAAC;QACNC,MAAM,EAAE;MACV;IACF,CAAC,CAAC;;IAEF;IACA,MAAME,UAAU,GAAGjC,KAAK,CAACkC,aAAa,CAAC;MACrC5B,KAAK,EAAE,wBAAwB;MAAE;MACjCqB,SAAS,EAAE,CAAC;MACZC,YAAY,EAAE;IAChB,CAAC,CAAC;;IAEF;IACA,MAAMO,SAAS,GAAGnC,KAAK,CAACkC,aAAa,CAAC;MACpC5B,KAAK,EAAE,wBAAwB;MAC/BqB,SAAS,EAAE,CAAC;MACZC,YAAY,EAAE;IAChB,CAAC,CAAC;IAEF,MAAMQ,aAAa,GAAG1C,IAAI,CAAC2C,GAAG,CAACC,IAAI,KAAK;MACtCvB,IAAI,EAAE1B,QAAQ,CAACkD,UAAU,CAACD,IAAI,CAACE,SAAS,CAAC,CAACtB,OAAO,CAAC,qBAAqB,CAAC,CAACuB,SAAS,CAAC,CAAC;MACpFC,IAAI,EAAEJ,IAAI,CAACI,IAAI;MACfC,IAAI,EAAEL,IAAI,CAACK,IAAI;MACfC,GAAG,EAAEN,IAAI,CAACM,GAAG;MACbC,KAAK,EAAEP,IAAI,CAACO,KAAK;MACjBC,MAAM,EAAER,IAAI,CAACQ;IACf,CAAC,CAAC,CAAC;;IAEH;IACA,MAAM;MAAEC,aAAa;MAAEC;IAAgB,CAAC,GAAGC,uBAAuB,CAACb,aAAa,CAAC;;IAEjF;IACA,MAAMc,QAAQ,GAAGC,aAAa,CAACf,aAAa,CAAC;IAE7CvC,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEoD,QAAQ,CAAC;;IAEnC;IACA,MAAME,OAAO,GAAGC,YAAY,CAACjB,aAAa,EAAE,EAAE,CAAC;IAE/ChB,iBAAiB,CAACkC,OAAO,CAAClB,aAAa,CAAC;IACxCd,eAAe,CAACgC,OAAO,CAACP,aAAa,CAAC;IACtCf,iBAAiB,CAACsB,OAAO,CAACN,eAAe,CAAC;IAC1Cf,UAAU,CAACqB,OAAO,CAACJ,QAAQ,CAAC;IAC5Bf,SAAS,CAACmB,OAAO,CAACF,OAAO,CAAC;IAE1BpD,KAAK,CAACW,SAAS,CAAC,CAAC,CAAC4C,UAAU,CAAC,CAAC;IAE9B,MAAMC,YAAY,GAAGA,CAAA,KAAM;MACzBxD,KAAK,CAACyD,YAAY,CAAC;QAAEvD,KAAK,EAAEN,iBAAiB,CAACK,OAAO,CAACyD;MAAY,CAAC,CAAC;IACtE,CAAC;IAEDC,MAAM,CAACC,gBAAgB,CAAC,QAAQ,EAAEJ,YAAY,CAAC;IAE/C,OAAO,MAAM;MACXG,MAAM,CAACE,mBAAmB,CAAC,QAAQ,EAAEL,YAAY,CAAC;MAClDxD,KAAK,CAAC8D,MAAM,CAAC,CAAC;IAChB,CAAC;EACH,CAAC,EAAE,CAACrE,GAAG,EAAEC,IAAI,CAAC,CAAC;;EAEf;EACA,MAAMyD,aAAa,GAAIzD,IAAI,IAAK;IAC9B,IAAIqE,YAAY,GAAG,CAAC;IACpB,IAAIC,gBAAgB,GAAG,CAAC;IAExB,OAAOtE,IAAI,CAAC2C,GAAG,CAAEC,IAAI,IAAK;MACxB,MAAM2B,YAAY,GAAG,CAAC3B,IAAI,CAACK,IAAI,GAAGL,IAAI,CAACM,GAAG,GAAGN,IAAI,CAACO,KAAK,IAAI,CAAC;MAC5DkB,YAAY,IAAIE,YAAY,GAAG3B,IAAI,CAACQ,MAAM;MAC1CkB,gBAAgB,IAAI1B,IAAI,CAACQ,MAAM;MAC/B,MAAMoB,IAAI,GAAGH,YAAY,GAAGC,gBAAgB;MAE5C,OAAO;QACLjD,IAAI,EAAEuB,IAAI,CAACvB,IAAI;QACfoD,KAAK,EAAED;MACT,CAAC;IACH,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAMb,YAAY,GAAGA,CAAC3D,IAAI,EAAE0E,MAAM,KAAK;IACrC,MAAMC,CAAC,GAAG,CAAC,IAAID,MAAM,GAAG,CAAC,CAAC;IAC1B,IAAIE,GAAG,GAAG5E,IAAI,CAAC,CAAC,CAAC,CAACmD,KAAK;IAEvB,OAAOnD,IAAI,CAAC2C,GAAG,CAAC,CAACC,IAAI,EAAEiC,KAAK,KAAK;MAC/B,IAAIA,KAAK,KAAK,CAAC,EAAE;QACf,OAAO;UAAExD,IAAI,EAAEuB,IAAI,CAACvB,IAAI;UAAEoD,KAAK,EAAEG;QAAI,CAAC;MACxC;MACAA,GAAG,GAAG,CAAChC,IAAI,CAACO,KAAK,GAAGyB,GAAG,IAAID,CAAC,GAAGC,GAAG;MAClC,OAAO;QAAEvD,IAAI,EAAEuB,IAAI,CAACvB,IAAI;QAAEoD,KAAK,EAAEG;MAAI,CAAC;IACxC,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAMrB,uBAAuB,GAAIvD,IAAI,IAAK;IACxC,MAAMqD,aAAa,GAAG,EAAE;IACxB,MAAMC,eAAe,GAAG,EAAE;;IAE1B;IACA,MAAMwB,QAAQ,GAAGC,IAAI,CAACC,GAAG,CAAC,GAAGhF,IAAI,CAAC2C,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACM,GAAG,CAAC,CAAC;IACxD,MAAM+B,QAAQ,GAAGF,IAAI,CAACG,GAAG,CAAC,GAAGlF,IAAI,CAAC2C,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACK,IAAI,CAAC,CAAC;IAEzDjD,IAAI,CAACmF,OAAO,CAAEvC,IAAI,IAAK;MACrB,MAAMtB,IAAI,GAAG3B,QAAQ,CAAC4B,WAAW,CAACqB,IAAI,CAACvB,IAAI,CAAC,CAACG,OAAO,CAAC,qBAAqB,CAAC;MAC3E,MAAM4D,IAAI,GAAG9D,IAAI,CAAC8D,IAAI;MACtB,MAAMC,MAAM,GAAG/D,IAAI,CAAC+D,MAAM;MAE1B,IAAID,IAAI,GAAG,CAAC,IAAKA,IAAI,KAAK,CAAC,IAAIC,MAAM,GAAG,EAAG,EAAE;QAC3ChC,aAAa,CAACiC,IAAI,CAAC;UAAEjE,IAAI,EAAEuB,IAAI,CAACvB,IAAI;UAAEoD,KAAK,EAAEK;QAAS,CAAC,EAAE;UAAEzD,IAAI,EAAEuB,IAAI,CAACvB,IAAI;UAAEoD,KAAK,EAAEQ;QAAS,CAAC,CAAC;MAChG,CAAC,MAAM,IAAIG,IAAI,IAAI,EAAE,EAAE;QACrB9B,eAAe,CAACgC,IAAI,CAAC;UAAEjE,IAAI,EAAEuB,IAAI,CAACvB,IAAI;UAAEoD,KAAK,EAAEK;QAAS,CAAC,EAAE;UAAEzD,IAAI,EAAEuB,IAAI,CAACvB,IAAI;UAAEoD,KAAK,EAAEQ;QAAS,CAAC,CAAC;MAClG;IACF,CAAC,CAAC;IAEF,OAAO;MAAE5B,aAAa;MAAEC;IAAgB,CAAC;EAC3C,CAAC;EAED,oBAAOzD,OAAA;IAAK0F,GAAG,EAAErF,iBAAkB;IAACsF,SAAS,EAAC;EAAgB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACnE;AAAC3F,EAAA,CAtKQH,aAAa;AAAA+F,EAAA,GAAb/F,aAAa;AAwKtB,eAAeA,aAAa;AAAC,IAAA+F,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}