{"ast":null,"code":"var _jsxFileName = \"/home/corey/Desktop/Smallcapgaps/smallcapgaps/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport SearchForm from './components/SearchForm';\nimport GapList from './components/GapList';\nimport Chart from './components/Chart';\nimport IntradayChart from './components/IntradayChart';\nimport './App.css';\nimport { fetchGapData, fetchDailyData, fetchIntradayData, fetchTickerStats } from './api';\nimport { v4 as uuidv4 } from 'uuid'; // Ensure uuid is installed: npm install uuid\nimport { DateTime } from 'luxon';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [gapData, setGapData] = useState([]);\n  const [expandedGaps, setExpandedGaps] = useState({}); // { [gapId]: gapObject }\n  const [loading, setLoading] = useState(false); // State for loading\n  const [error, setError] = useState(null); // State for errors\n  const [tickerStats, setTickerStats] = useState({});\n  const handleSearch = async searchParams => {\n    console.log('Searching with params:', searchParams);\n    try {\n      setLoading(true);\n      setError(null);\n      const data = await fetchGapData(searchParams);\n      console.log('Received data:', data);\n\n      // Sort the data by gap_percent in descending order and assign unique IDs\n      const sortedData = data.sort((a, b) => b.gap_percent - a.gap_percent).map(gap => ({\n        ...gap,\n        id: uuidv4()\n      })); // Assign unique ID\n\n      setGapData(sortedData);\n      setExpandedGaps({}); // Reset expanded gaps on new search\n    } catch (error) {\n      console.error('Error fetching gap data:', error);\n      setError('Failed to fetch gap data.');\n      setGapData([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    const fetchStats = async () => {\n      const uniqueTickers = [...new Set(gapData.map(gap => gap.ticker))];\n      const stats = {};\n      for (const ticker of uniqueTickers) {\n        try {\n          const tickerStat = await fetchTickerStats(ticker);\n          stats[ticker] = tickerStat;\n          console.log(`Fetched stats for ${ticker}:`, tickerStat); // Add this line\n        } catch (error) {\n          console.error(`Failed to fetch stats for ${ticker}:`, error);\n        }\n      }\n      setTickerStats(stats);\n      console.log('All ticker stats:', stats); // Add this line\n    };\n    if (gapData.length > 0) {\n      fetchStats();\n    }\n  }, [gapData]);\n  const handleGapSelect = async gap => {\n    console.log('Gap clicked:', gap);\n\n    // Toggle expansion\n    if (expandedGaps[gap.id]) {\n      // If already expanded, collapse it\n      const newExpandedGaps = {\n        ...expandedGaps\n      };\n      delete newExpandedGaps[gap.id];\n      setExpandedGaps(newExpandedGaps);\n      return;\n    }\n\n    // If the gap already has the necessary data, expand it\n    if (gap.daily_data && gap.intraday_data) {\n      setExpandedGaps(prev => ({\n        ...prev,\n        [gap.id]: gap\n      }));\n      return;\n    }\n\n    // Else, fetch the missing data\n    try {\n      setLoading(true);\n      setError(null);\n      const {\n        ticker,\n        date\n      } = gap;\n      if (!ticker || !date) {\n        console.warn('Gap lacks ticker or date, cannot fetch data.');\n        setError('Selected gap lacks ticker or date, unable to fetch data.');\n        return;\n      }\n      const dailyData = await fetchDailyData({\n        ticker,\n        start_date: date,\n        end_date: date\n      });\n      console.log('Fetched Daily Data:', dailyData);\n      const intradayData = await fetchIntradayData({\n        ticker,\n        date\n      });\n      console.log('Fetched Intraday Data:', intradayData);\n      const updatedGap = {\n        ...gap,\n        daily_data: dailyData,\n        intraday_data: intradayData\n      };\n      setGapData(prevGaps => prevGaps.map(g => g.id === gap.id ? updatedGap : g));\n      setExpandedGaps(prev => ({\n        ...prev,\n        [gap.id]: updatedGap\n      }));\n    } catch (error) {\n      console.error('Error fetching additional data for the selected gap:', error);\n      setError('Failed to fetch additional data for the selected gap.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Small Cap Gaps\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchForm, {\n      onSearch: handleSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(GapList, {\n      gaps: gapData,\n      onSelectGap: handleGapSelect,\n      expandedGaps: expandedGaps,\n      ticker_stats: tickerStats\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"OVHaOcjH8lvo6ElRj1LNvDL/oEQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","SearchForm","GapList","Chart","IntradayChart","fetchGapData","fetchDailyData","fetchIntradayData","fetchTickerStats","v4","uuidv4","DateTime","jsxDEV","_jsxDEV","App","_s","gapData","setGapData","expandedGaps","setExpandedGaps","loading","setLoading","error","setError","tickerStats","setTickerStats","handleSearch","searchParams","console","log","data","sortedData","sort","a","b","gap_percent","map","gap","id","fetchStats","uniqueTickers","Set","ticker","stats","tickerStat","length","handleGapSelect","newExpandedGaps","daily_data","intraday_data","prev","date","warn","dailyData","start_date","end_date","intradayData","updatedGap","prevGaps","g","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSearch","gaps","onSelectGap","ticker_stats","_c","$RefreshReg$"],"sources":["/home/corey/Desktop/Smallcapgaps/smallcapgaps/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport SearchForm from './components/SearchForm';\nimport GapList from './components/GapList';\nimport Chart from './components/Chart';\nimport IntradayChart from './components/IntradayChart';\nimport './App.css';\nimport { fetchGapData, fetchDailyData, fetchIntradayData, fetchTickerStats } from './api';\nimport { v4 as uuidv4 } from 'uuid'; // Ensure uuid is installed: npm install uuid\nimport { DateTime } from 'luxon';\n\nfunction App() {\n  const [gapData, setGapData] = useState([]);\n  const [expandedGaps, setExpandedGaps] = useState({}); // { [gapId]: gapObject }\n  const [loading, setLoading] = useState(false); // State for loading\n  const [error, setError] = useState(null); // State for errors\n  const [tickerStats, setTickerStats] = useState({});\n\n  const handleSearch = async (searchParams) => {\n    console.log('Searching with params:', searchParams);\n    try {\n      setLoading(true);\n      setError(null);\n      const data = await fetchGapData(searchParams);\n      console.log('Received data:', data);\n      \n      // Sort the data by gap_percent in descending order and assign unique IDs\n      const sortedData = data\n        .sort((a, b) => b.gap_percent - a.gap_percent)\n        .map(gap => ({ ...gap, id: uuidv4() })); // Assign unique ID\n      \n      setGapData(sortedData);\n      setExpandedGaps({}); // Reset expanded gaps on new search\n    } catch (error) {\n      console.error('Error fetching gap data:', error);\n      setError('Failed to fetch gap data.');\n      setGapData([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    const fetchStats = async () => {\n      const uniqueTickers = [...new Set(gapData.map(gap => gap.ticker))];\n      const stats = {};\n      for (const ticker of uniqueTickers) {\n        try {\n          const tickerStat = await fetchTickerStats(ticker);\n          stats[ticker] = tickerStat;\n          console.log(`Fetched stats for ${ticker}:`, tickerStat);  // Add this line\n        } catch (error) {\n          console.error(`Failed to fetch stats for ${ticker}:`, error);\n        }\n      }\n      setTickerStats(stats);\n      console.log('All ticker stats:', stats);  // Add this line\n    };\n\n    if (gapData.length > 0) {\n      fetchStats();\n    }\n  }, [gapData]);\n\n  const handleGapSelect = async (gap) => {\n    console.log('Gap clicked:', gap);\n    \n    // Toggle expansion\n    if (expandedGaps[gap.id]) {\n      // If already expanded, collapse it\n      const newExpandedGaps = { ...expandedGaps };\n      delete newExpandedGaps[gap.id];\n      setExpandedGaps(newExpandedGaps);\n      return;\n    }\n\n    // If the gap already has the necessary data, expand it\n    if (gap.daily_data && gap.intraday_data) {\n      setExpandedGaps(prev => ({ ...prev, [gap.id]: gap }));\n      return;\n    }\n\n    // Else, fetch the missing data\n    try {\n      setLoading(true);\n      setError(null);\n\n      const { ticker, date } = gap;\n\n      if (!ticker || !date) {\n        console.warn('Gap lacks ticker or date, cannot fetch data.');\n        setError('Selected gap lacks ticker or date, unable to fetch data.');\n        return;\n      }\n\n      const dailyData = await fetchDailyData({ ticker, start_date: date, end_date: date });\n      console.log('Fetched Daily Data:', dailyData);\n\n      const intradayData = await fetchIntradayData({ ticker, date });\n      console.log('Fetched Intraday Data:', intradayData);\n\n      const updatedGap = { \n        ...gap, \n        daily_data: dailyData, \n        intraday_data: intradayData \n      };\n\n      setGapData(prevGaps => prevGaps.map(g => g.id === gap.id ? updatedGap : g));\n      setExpandedGaps(prev => ({ ...prev, [gap.id]: updatedGap }));\n    } catch (error) {\n      console.error('Error fetching additional data for the selected gap:', error);\n      setError('Failed to fetch additional data for the selected gap.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Small Cap Gaps</h1>\n      <SearchForm onSearch={handleSearch} />\n      \n      {loading && <p>Loading...</p>}\n      {error && <p className=\"error\">{error}</p>}\n      \n      <GapList \n        gaps={gapData} \n        onSelectGap={handleGapSelect} \n        expandedGaps={expandedGaps} \n        ticker_stats={tickerStats}\n      />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}